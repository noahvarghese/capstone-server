name: Continuous Integration

on:
  push:
    branches:
      - "*"
      - "!main"
  pull_request:
    branches:
      - "*"

jobs:
  check-formatting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: install dependencies
        run: npm i
      - name: check formatting
        run: npm run format:check
  check-documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Check API Documentation"
        uses: ./.github/actions/check-documentation
        with:
          doc: ./README.md
          routes: ./src/routes/
  db-should-update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: install python dependencies
        run: python -m pip install --upgrade mysql-connector-python python-dotenv wheel
      - name: Reset database if SQL files changed
        uses: ./.github/actions/run-on-file-change
        with:
          files: "\"database\""
          command: "python ./bin/database/reset/main.py -t --files ./database/"
  continuous-integration:
    needs: db-should-update
    env:
      DB: ${{ secrets.DB }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_PWD: ${{ secrets.DB_PWD }}
      DB_TYPE: ${{ secrets.DB_TYPE }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      ENABLE_MULTITHREADING: ${{ secrets.ENABLE_MULTITHREADING }}
      ENV_DEV_CLIENT: ${{ secrets.ENV_DEV_CLIENT }}
      ENV_LOCAL_CLIENT: ${{ secrets.ENV_LOCAL_CLIENT }}
      ENV_PROD_CLIENT: ${{ secrets.ENV_PROD_CLIENT }}
      ENV_LOCAL_SERVER: ${{ secrets.ENV_LOCAL_SERVER }}
      ENV_DEV_SERVER: ${{ secrets.ENV_DEV_SERVER }}
      ENV_PROD_SERVER: ${{ secrets.ENV_PROD_SERVER }}
      LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
      MAIL_PWD: ${{ secrets.MAIL_PWD }}
      MAIL_USER: ${{ secrets.MAIL_USER }}
      PORT: ${{ secrets.PORT }}
      SESSION_ID: ${{ secrets.SESSION_ID }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      TARGET_ENV: ${{ secrets.TARGET_ENV }}
      SECONDARY_TEST_EMAIL: ${{ secrets.SECONDARY_TEST_EMAIL }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: install dependencies
        run: npm ci
      - name: unit tests
        uses: ./.github/actions/run-on-file-change
        with:
          files: "\"src/models, test/jest, test/sample_data/model, database\""
          command: "npm run test:jest"
      - name: auth tests
        uses: ./.github/actions/run-on-file-change
        with:
          files: "\"src/routes/auth, test/cucumber/features/auth, test/sample_data\""
          command: "npm run test:cucumber-feature -- ./test/cucumber/feature/auth"
      - name: departments tests
        uses: ./.github/actions/run-on-file-change
        with:
          files: "\"src/routes/departments, test/cucumber/features/departments, test/sample_data\""
          command: "npm run test:cucumber-feature -- ./test/cucumber/feature/departments"
      - name: roles tests
        uses: ./.github/actions/run-on-file-change
        with:
          files: "\"src/routes/roles, test/cucumber/features/roles, test/sample_data\""
          command: "npm run test:cucumber-feature -- ./test/cucumber/feature/roles"
      - name: members tests
        uses: ./.github/actions/run-on-file-change
        with:
          files: "\"src/routes/members, test/cucumber/features/members, test/sample_data\""
          command: "npm run test:cucumber-feature -- ./test/cucumber/feature/members"
      - name: settings tests
        uses: ./.github/actions/run-on-file-change
        with:
          files: "\"src/routes/settings, test/cucumber/features/settings, test/sample_data\""
          command: "npm run test:cucumber-feature -- ./test/cucumber/feature/settings"
