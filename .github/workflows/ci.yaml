name: Continuous Integration 
on:
  push:
    branches:
      - "*"
      - "!release"
      - "!develop"
  pull_request:
    branches:
      - "release"
      - "develop"

jobs:
  check-formatting:
    if: "(!contains(github.event.head_commit.message, 'pipeline skip') && !contains(github.event.head_commit.message, 'skip pipeline')) || (!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci'))"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: cache node modules
        uses: ./.github/actions/cache-node-modules
      - name: check formatting
        run: npm run format:check
  continuous-integration:
    if: "(!contains(github.event.head_commit.message, 'pipeline skip') && !contains(github.event.head_commit.message, 'skip pipeline')) || (!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci'))"
    env:
      DB: ${{ secrets.DB }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_PWD: ${{ secrets.DB_PWD }}
      DB_TYPE: ${{ secrets.DB_TYPE }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      ENABLE_MULTITHREADING: ${{ secrets.ENABLE_MULTITHREADING }}
      ENV_DEV_CLIENT: ${{ secrets.ENV_DEV_CLIENT }}
      ENV_LOCAL_CLIENT: ${{ secrets.ENV_LOCAL_CLIENT }}
      ENV_PROD_CLIENT: ${{ secrets.ENV_PROD_CLIENT }}
      ENV_LOCAL_SERVER: ${{ secrets.ENV_LOCAL_SERVER }}
      ENV_DEV_SERVER: ${{ secrets.ENV_DEV_SERVER }}
      ENV_PROD_SERVER: ${{ secrets.ENV_PROD_SERVER }}
      LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
      MAIL_PWD: ${{ secrets.MAIL_PWD }}
      MAIL_USER: ${{ secrets.MAIL_USER }}
      PORT: ${{ secrets.PORT }}
      SESSION_ID: ${{ secrets.SESSION_ID }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      TARGET_ENV: ${{ secrets.TARGET_ENV }}
      SECONDARY_TEST_EMAIL: ${{ secrets.SECONDARY_TEST_EMAIL }}
      TIMEOUT_MULTIPLIER: ${{ secrets.TIMEOUT_MULTIPLIER }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: set npm shell
        run: npm run init:npm-shell
        shell: bash
      - id: ci
        uses: ./.github/actions/ci
      - name: build
        run: npm run build
      - name: Publish npm log
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: "npm-log"
          path: "/home/runner/.npm/_logs"
      - name: Publish test results
        if: always()
        uses: ./.github/actions/publish
