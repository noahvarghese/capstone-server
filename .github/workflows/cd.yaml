name: Continuous Deployment 

on:
  push:
   branches: [main]

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    env:
      DB: ${{ secrets.DB }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_PWD: ${{ secrets.DB_PWD }}
      DB_TYPE: ${{ secrets.DB_TYPE }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      ENABLE_MULTITHREADING: ${{ secrets.ENABLE_MULTITHREADING }}
      ENV_DEV_CLIENT: ${{ secrets.ENV_DEV_CLIENT }}
      ENV_LOCAL_CLIENT: ${{ secrets.ENV_LOCAL_CLIENT }}
      ENV_PROD_CLIENT: ${{ secrets.ENV_PROD_CLIENT }}
      ENV_LOCAL_SERVER: ${{ secrets.ENV_LOCAL_SERVER }}
      ENV_DEV_SERVER: ${{ secrets.ENV_DEV_SERVER }}
      ENV_PROD_SERVER: ${{ secrets.ENV_PROD_SERVER }}
      LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
      MAIL_PWD: ${{ secrets.MAIL_PWD }}
      MAIL_USER: ${{ secrets.MAIL_USER }}
      PORT: ${{ secrets.PORT }}
      SESSION_ID: ${{ secrets.SESSION_ID }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      TARGET_ENV: ${{ secrets.TARGET_ENV }}
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    steps: 
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - name: install python dependencies
        run: python -m pip install --upgrade mysql-connector-python python-dotenv wheel
      - name: reset test DB
        run: python ./bin/reset_db/reset_db.py --files ./database/ -t
      - uses: actions/setup-node@v2
      - name: install dependencies
        run: npm i
      - name: unit test
        run: npm run test:jest
      - name: bdd test
        run: npm run test:cucumber
  bump-version-number:
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    needs: continuous-integration
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Increment version by one
        run: |
          # Gets Whole Version Number
          VERSION=$(cat ./package.json | grep version | cut -d : -f 2 | sed 's/\",$//g' | sed 's/\"//g') 
          # Gets last digit of version number
          TRAILING_VERSION=$(echo $VERSION | cut -d . -f 3)
          # Adds 1 to last digit of version number
          TRAILING_VERSION=$((TRAILING_VERSION+1))
          VERSION=\"$(echo $VERSION | cut -d . -f 1).$(echo $VERSION | cut -d . -f 2).$TRAILING_VERSION\"
          # Apply new version number to package.json
          sed 's/\"version\":.*/\"version\": '$VERSION',/g' -i package.json 
      - name: Commit package.json
        run: |
          git config --local user.email "varghese.noah@gmail.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "CD pipeline version bump [skip ci]"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
          branch: ${{ github.ref }}
  continuous-deployment:
    needs: bump-version-number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - name: build
        run: npm build
      - name: zip package
        run: zip -r deploy.zip ./build
      - name: get version number
        run: |
          # Gets Whole Version Number
          VERSION=$(cat ./package.json | grep version | cut -d : -f 2 | sed 's/\",$//g' | sed 's/\"//g')
          VERSION=$(echo $VERSION | cut -d . -f 1)$(echo $VERSION | cut -d . -f 2)$(echo $VERSION | cut -d . -f 3) 
      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v18
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: capstone 
          environment_name: Capstone-env-1 
          version_label: ${{ env.VERSION }} 
          region: ca-central-1
          deployment_package: deploy.zip


 