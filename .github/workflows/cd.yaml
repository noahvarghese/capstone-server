name: Continuous Deployment

on:
    push:
        branches: [main]

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    env:
      DB: ${{ secrets.DB }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_PWD: ${{ secrets.DB_PWD }}
      DB_TYPE: ${{ secrets.DB_TYPE }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_USER: ${{ secrets.DB_USER }}
      ENABLE_MULTITHREADING: ${{ secrets.ENABLE_MULTITHREADING }}
      ENV_DEV_CLIENT: ${{ secrets.ENV_DEV_CLIENT }}
      ENV_LOCAL_CLIENT: ${{ secrets.ENV_LOCAL_CLIENT }}
      ENV_PROD_CLIENT: ${{ secrets.ENV_PROD_CLIENT }}
      ENV_LOCAL_SERVER: ${{ secrets.ENV_LOCAL_SERVER }}
      ENV_DEV_SERVER: ${{ secrets.ENV_DEV_SERVER }}
      ENV_PROD_SERVER: ${{ secrets.ENV_PROD_SERVER }}
      LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
      MAIL_PWD: ${{ secrets.MAIL_PWD }}
      MAIL_USER: ${{ secrets.MAIL_USER }}
      PORT: ${{ secrets.PORT }}
      SESSION_ID: ${{ secrets.SESSION_ID }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      TARGET_ENV: ${{ secrets.TARGET_ENV }}
      SECONDARY_TEST_EMAIL: ${{ secrets.SECONDARY_TEST_EMAIL }}
    if: "(!contains(github.event.head_commit.message, 'pipeline skip') && !contains(github.event.head_commit.message, 'skip pipeline')) || (!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci'))"
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/ci
  continuous-deployment:
    if: "(!contains(github.event.head_commit.message, 'pipeline skip') && !contains(github.event.head_commit.message, 'skip pipeline')) || (!contains(github.event.head_commit.message, 'cd skip') && !contains(github.event.head_commit.message, 'skip cd'))"
    runs-on: ubuntu-latest
    needs: continuous-integration
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # Needed to set the region in order for the aws cli not to fail
      AWS_REGION: "ca-central-1"
      AWS_DEFAULT_REGION: "ca-central-1"
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
      - uses: actions/setup-node@v2
      - id: version
        name: Increment version by one
        run: echo '::set-output name=VERSION::"$(./bin/files/get_version_from_package_json.sh)"'
      - name: install dependencies
        run: npm i
      - name: build
        run: npm run build
      - name: create artifact
        run: zip -r deploy.zip ./build/* Procfile Buildfile package.json package-lock.json .ebextensions .platform
      - name: upload artifact
        run: aws s3 cp deploy.zip s3://${{ secrets.AWS_S3_ARTIFACT_BUCKET }}/${{ secrets.AWS_S3_ARTIFACT_LOCATION }}deploy_${{ steps.version.outputs.VERSION }}.zip
      - name: create application version
        run: aws elasticbeanstalk create-application-version --application-name ${{ secrets.AWS_APPLICATION_NAME }} --version-label ${{ steps.version.outputs.VERSION }} --source-bundle S3Bucket="noahvarghese.me",S3Key="capstone/artifacts/deploy_${{ steps.version.outputs.VERSION }}.zip"
      - name: update application
        run: aws elasticbeanstalk update-environment --application-name ${{ secrets.AWS_APPLICATION_NAME }} --environment-name ${{ secrets.AWS_ENVIRONMENT_NAME }} --version-label ${{ steps.version.outputs.VERSION }}
  modify-files:
    if: "!contains(github.event.head_commit.message, 'ci skip') && !contains(github.event.head_commit.message, 'skip ci')"
    needs: continuous-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal token
          fetch-depth: 0 # otherwise, you will failed to push refs to dest repo
      - uses: actions/setup-node@v2
      - name: install dependencies
        run: npm i
      - name: format files
        run: npm run format
      - id: version
        name: Increment version by one
        run: echo '::set-output name=VERSION::"$(./bin/files/get_version_from_package_json.sh)"'
      - name: Apply version
        run: |
          # Apply new version number to package.json
          sed 's/\"version\":.*/\"version\": '${{ steps.version.outputs.VERSION }}',/g' -i package.json 
      - name: Commit & Push changes
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: bump version ${{ steps.version.outputs.VERSION }} [skip ci]
