{
    "openapi": "3.0.3",
    "info": {
        "title": "OnBoard API",
        "version": "1.0.0",
        "description": "This is the backend for a text based learning management system. Built to digitize traditional onboarding documents and training, as well as keep track of user's progress.",
        "contact": {
            "name": "Noah Varghese",
            "url": "https://noahvarghese.me",
            "email": "noah.varghese@mohawkcollege.ca"
        }
    },
    "servers": [
        {
            "url": "https://api.capstone.noahvarghese.me",
            "description": "production server"
        },
        {
            "url": "http://localhost:8080",
            "description": "development server"
        }
    ],
    "components": {
        "schemas": {
            "Business": {
                "description": "Businesses that a user would be a member of",
                "type": "object",
                "properties": {
                    "default": {
                        "description": "Whether this is the user's default business.",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "unique identifier",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the business",
                        "type": "string"
                    }
                }
            },
            "Department": {
                "description": "Department within Business",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "department name",
                        "type": "string"
                    },
                    "id": {
                        "description": "unique identifier",
                        "type": "integer"
                    }
                }
            },
            "Permission": {
                "description": "Permissions applied to members of a Role.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "unique identifier",
                        "type": "integer"
                    },
                    "global_crud_users": {
                        "description": "Allows user to invite users to, or remove users from business.",
                        "type": "boolean"
                    },
                    "global_crud_department": {
                        "description": "Allows user to create/remove/change name of department(s).",
                        "type": "boolean"
                    },
                    "global_crud_role": {
                        "description": "Allows user to create/remove/change name of role(s), as well as modify the permissions of this role.",
                        "type": "boolean"
                    },
                    "global_crud_resources": {
                        "description": "Able to create/remove/edit manuals or quizzes for any department in the business.",
                        "type": "boolean"
                    },
                    "global_assign_users_to_department": {
                        "description": "Allowed to assign members of the business to departments within the business.",
                        "type": "boolean"
                    },
                    "global_assign_users_to_role": {
                        "description": "Allowed to assign members of the business to roles within the business.",
                        "type": "boolean"
                    },
                    "global_assign_resources_to_department": {
                        "description": "Allows to assign manuals/quizzes to department(s) within the business.",
                        "type": "boolean"
                    },
                    "global_assign_resources_to_role": {
                        "description": "Allows to assign manuals/quizzes to role(s) within the business.",
                        "type": "boolean"
                    },
                    "global_view_reports": {
                        "description": "Allows user to view reports for all areas of business.",
                        "type": "boolean"
                    },
                    "dept_crud_role": {
                        "description": "Allows user to create/delete/update roles within the department they are apart of.",
                        "type": "boolean"
                    },
                    "dept_crud_resources": {
                        "description": "Allows user to create/delete/update resources within the department they are apart of.",
                        "type": "boolean"
                    },
                    "dept_assign_users_to_role": {
                        "description": "Allows user to update other users assignment to roles within the department that both users reside in.",
                        "type": "boolean"
                    },
                    "dept_assign_resources_to_role": {
                        "description": "Allows user to update resource assignment within the department that they are already apart of.",
                        "type": "boolean"
                    },
                    "dept_view_reports": {
                        "description": "Allows user to view reports for all objects residing in current department.",
                        "type": "boolean"
                    }
                }
            },
            "Role": {
                "description": "Role within Department",
                "type": "object",
                "properties": {
                    "default": {
                        "description": "default role",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "role name",
                        "type": "string"
                    },
                    "id": {
                        "description": "unique identifier",
                        "type": "integer"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/Permission"
                    },
                    "department": { "$ref": "#/components/schemas/Department" }
                }
            },
            "User": {
                "type": "object",
                "properties": {
                    "first_name": {
                        "description": "The user's first name",
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The user's last name",
                        "type": "string"
                    },
                    "email": {
                        "description": "The user's email",
                        "type": "string",
                        "format": "email"
                    },
                    "phone": {
                        "description": "The user's phone number",
                        "type": "string"
                    },
                    "member": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "description": "Whether the user has accepted their membership yet",
                                "type": "boolean"
                            },
                            "id": {
                                "description": "unique identifier",
                                "type": "integer"
                            }
                        }
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Role"
                        }
                    }
                }
            }
        },
        "responses": {
            "Success": {
                "description": "success"
            },
            "ForeignKeyError": {
                "description": "Foreign key references still exist for entity"
            },
            "ArgumentsError": {
                "description": "invalid request body or parameters"
            },
            "PermissionsError": {
                "description": "invalid permissions"
            },
            "DatabaseError": {
                "description": "Database connection failed"
            }
        }
    },
    "tags": [
        {
            "name": "auth",
            "description": "Allows user to (de)authenticate with server to send requests."
        },
        {
            "name": "business",
            "description": "Business operations"
        },
        {
            "name": "user",
            "description": "User operations"
        },
        {
            "name": "membership",
            "description": "Membership operations. Model joins one User to one Business, allows many to many relationship."
        },
        {
            "name": "membership invitation",
            "description": "Invite operations. Model joins one User to one Business, allows many to many relationship. Intermediary table before Member table."
        },
        {
            "name": "department",
            "description": "Department operations. One Business has many Departments"
        },
        {
            "name": "role",
            "description": "Role operations. One Department has many Businesses"
        },
        {
            "name": "permission",
            "description": "Permission operations. One Role has one set of Permissions."
        },
        {
            "name": "user role",
            "description": "User Role operations. Model joins one User to one Role, allows many to many relationship. Requires that the User be a Member of the Business."
        },
        {
            "name": "manual",
            "description": "Manual operations. One business has many Manuals."
        },
        {
            "name": "manual assignment",
            "description": "Manual Assignemnt operations. Model joins one Manual to either one of Department or Role, allows many to many relationship. Requires that all invlovled objects be linked to the same business."
        },
        {
            "name": "manual section",
            "description": "Manual Section operations. One Manual has many Sections."
        },
        {
            "name": "policy",
            "description": "Policy operations. One Manual has many Policies."
        },
        {
            "name": "content",
            "description": "Content operations. One Policy has many pieces of Content."
        },
        {
            "name": "policy read",
            "description": "Policy Read operations. Model joins User and Policy, allows many to many relationship."
        },
        {
            "name": "quiz",
            "description": "Quiz operations. One Manual has many Quizzes."
        },
        {
            "name": "quiz sections",
            "description": "Quiz Section operations. One Quiz has many Sections."
        },
        {
            "name": "quiz question",
            "description": "Quiz Question operations. One Section has many Questions."
        },
        {
            "name": "quiz answer",
            "description": "Quiz Answer operations. One Question has many Answers (only one of them correct)."
        },
        {
            "name": "quiz attempt",
            "description": "Quiz Attempt operations. Model joins Quiz as a whole to User, allows many to many relationship."
        },
        {
            "name": "quiz result",
            "description": "Quiz Result operations. Model joins Quiz Attempt to Quiz Question, and Member's selected Quiz Answer, allows many to many to many relationship."
        }
    ],
    "paths": {
        "/auth/register": {
            "post": {
                "tags": [
                    "auth",
                    "business",
                    "user",
                    "membership",
                    "department",
                    "role",
                    "permission",
                    "user role"
                ],
                "operationId": "CreateBusinessWithAdminAccount",
                "summary": "Creates a new business account with an administrator account for the business with appropriate permissions.",
                "description": "Responsible for instantiating all records to support an Admin account.\nCreates Business.\nCreates User.\nCreates Member.\nCreates Admin Department.\nCreates Admin Role with full Permissions.\nAssigns new Member to Role.\nSends back a cookie containing the user_id and business_id.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "first_name": {
                                        "description": "User's first name",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "User's last name",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "User's email",
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "phone": {
                                        "description": "User's phone number, currently only accepts Canadian numbers",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "User's password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "confirm_password": {
                                        "description": "Copy of the user's password to confirm they typed it correctly",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "name": {
                                        "description": "Name of the business",
                                        "type": "string"
                                    },
                                    "address": {
                                        "description": "Business street address",
                                        "type": "string"
                                    },
                                    "city": {
                                        "description": "City of business",
                                        "type": "string"
                                    },
                                    "postal_code": {
                                        "description": "Postal code of business",
                                        "type": "string"
                                    },
                                    "province": {
                                        "description": "Province of business",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "first_name",
                                    "email",
                                    "phone",
                                    "password",
                                    "confirm_password",
                                    "name",
                                    "address",
                                    "city",
                                    "province",
                                    "postal_code"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created business, user, admin department, admin role, and assigned user to business and role."
                    },
                    "400": {
                        "description": "Missing or invalid request body."
                    },
                    "500": {
                        "description": "Database connection failed"
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "tags": ["auth"],
                "operationId": "Login",
                "summary": "Logs in a registered user.",
                "description": "Authenticates user against database. Checks if database password is empty. Sends back a cookie containing the user_id and business_id.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "description": "User's email",
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "password": {
                                        "description": "User's password",
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "required": ["email", "password"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Found user, and user is a member of a business."
                    },
                    "400": {
                        "description": "Missing or invalid request body."
                    },
                    "401": {
                        "description": "User does not exist."
                    },
                    "403": {
                        "description": "User is not a member of a business."
                    },
                    "500": {
                        "description": "Database connection failed"
                    }
                }
            }
        },
        "/auth/forgot_password": {
            "post": {
                "tags": ["auth", "user"],
                "summary": "Sends email to user to reset password",
                "description": "Creates a token with an expiry and emails the link with the token to the user.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "description": "Email of the user who forgot the password",
                                        "type": "string",
                                        "format": "email"
                                    }
                                },
                                "required": ["email"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully set the token and expiry"
                    },
                    "400": {
                        "description": " Request body missing or invalid"
                    },
                    "500": {
                        "description": "Database connection failed"
                    }
                }
            }
        },
        "/auth/reset_password/{token}": {
            "post": {
                "tags": ["auth", "user"],
                "summary": "Allows user to set a new password",
                "description": "Provided the token is correct, the user can set a new password.",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "Token generated in /auth/forgot_password",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "password": {
                                        "description": "The new password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "confirm_password": {
                                        "description": "Copy of the new password to ensure its typed properly.",
                                        "type": "string",
                                        "format": "password"
                                    }
                                },
                                "required": ["password", "confirm_password"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully"
                    },
                    "400": {
                        "description": "Invalid or missing request body"
                    },
                    "401": {
                        "description": "Invalid token provided"
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "tags": ["auth"],
                "summary": "Logout user",
                "description": "Invalidate cookie",
                "responses": {
                    "200": {
                        "description": "User logged out"
                    },
                    "400": {
                        "description": "Invalid cookie sent"
                    },
                    "500": {
                        "description": "Database connection failed"
                    }
                }
            }
        },
        "/businesses": {
            "get": {
                "tags": ["business"],
                "summary": "get businesses the logged in user is a member of",
                "description": "uses the cookie the see which user is logged in",
                "responses": {
                    "200": {
                        "description": "success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Business"
                                }
                            }
                        }
                    },
                    "400": { "description": "invalid cookie" },
                    "500": { "$ref": "#/components/responses/DatabaseError" }
                }
            }
        },
        "/departments": {
            "get": {
                "tags": ["department"],
                "summary": "Get all departments in business",
                "description": "Only Users who have global permissions can access this.",
                "responses": {
                    "200": {
                        "description": "success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Department"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            },
            "post": {
                "tags": ["department"],
                "summary": "create new department",
                "description": "only users who have crud permissions for departments can use this",
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "403": {
                        "description": "invalid permissions"
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            }
        },
        "/departments/{id}": {
            "put": {
                "tags": ["department"],
                "summary": "updates department",
                "description": "Pretty much only changes the name of the department",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "unique identifier for the department",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "description": "new name of department",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/ArgumentsError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionsError"
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            },
            "delete": {
                "tags": ["department"],
                "summary": "deletes department",
                "description": "Checks if any users or manuals are assigned to this department before deleting",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "unique identifier for the department",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/responses/Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/ArgumentsError"
                    },
                    "403": {
                        "$ref": "#/components/responses/PermissionsError"
                    },
                    "405": {
                        "$ref": "#/components/responses/ForeignKeyError"
                    },
                    "500": { "$ref": "#/components/responses/DatabaseError" }
                }
            }
        },
        "/members": {
            "get": {
                "tags": ["membership"],
                "summary": "Retrieves all users in business or department depending on permissions.",
                "description": "Filters by department, role, member status, has pagination and sorting as well. Depending on calling user's permissions this may restrict the user's shown to be either company or department wide.",
                "parameters": [
                    {
                        "name": "search",
                        "description": "text to search for",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort_field",
                        "description": "The field to sort on",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": [
                                "department",
                                "role",
                                "first_name",
                                "last_name",
                                "email",
                                "phone"
                            ]
                        }
                    },
                    {
                        "name": "sort_order",
                        "description": "The direction to sort in",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["ASC", "DESC"]
                        }
                    },
                    {
                        "name": "limit",
                        "description": "Maximum number of records to return.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "page",
                        "description": "The nth group to return when the results are divided by the limit.",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "filter_field",
                        "description": "the field to filter by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": ["role", "department"]
                        }
                    },
                    {
                        "name": "filter_ids",
                        "description": "the ids of the applicable model to filter for",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong combination of query parameters. The following pairs of query parameters must be sent together: (limit, page), (filter_ids, filter_field), (sort_order, sort_field), (search)."
                    },
                    "403": {
                        "description": "Underprivilged user trying to access users they are not allowed to see."
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            }
        },
        "/members/{id}": {
            "get": {
                "tags": ["membership"],
                "summary": "get individual user",
                "description": "Get user by id. Underpriveleged users can get their own user but no one else's.",
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the user whose details are to be retrieved.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "$ref": "#/components/schemas/User"
                    },
                    "403": {
                        "description": "Either underprivileged user trying to access another user than itself, or user has priveleges to view only department users and id is not member of same department."
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            },
            "delete": {
                "tags": ["membership"],
                "summary": "Delete membership",
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the user whose membership will be deleted.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membership successfully deleted."
                    },
                    "400": {
                        "description": "invalid id"
                    },
                    "403": {
                        "description": "User id either does not match logged in user, or logged in user does not have the permissions."
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            }
        },
        "/members/invite": {
            "post": {
                "summary": "Send invite to user to join.",
                "description": "Creates a user object using the provided details. Creates entry in membership invitation and generates token.",
                "tags": ["membership invitation", "user"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "first_name": {
                                        "description": "the name of the user to be invited",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "the last name of the user to be invited",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "the email of the user to be invited",
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "phone": {
                                        "description": "the phone of the user to be invited",
                                        "type": "string"
                                    }
                                },
                                "required": ["email", "first_name"]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "token created and email sent to user with link to /members/invite/{token} using token."
                    },
                    "400": {
                        "description": " Request body missing or invalid"
                    },
                    "403": {
                        "description": "User does not have permissions necessary to invite a user to join the business."
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            }
        },
        "/members/invite/{id}": {
            "delete": {
                "tags": ["membership invitation"],
                "summary": "deletes sent invitation",
                "description": "deletes row in table",
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the invitation.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membership Invitation successfully deleted."
                    },
                    "400": {
                        "description": "invalid id"
                    },
                    "403": {
                        "description": "Logged in user does not have the permissions."
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            }
        },
        "/members/invite/{token}": {
            "patch": {
                "summary": "Makes invited user a member of the business.",
                "description": "Deletes record of membership invitation and creates new membership record. If user has not registered, this should generate a token for the user to set their password.",
                "parameters": [
                    {
                        "name": "token",
                        "description": "the token generated from the post request to the same url",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "tags": ["membership invitation", "membership"],
                "responses": {
                    "200": {
                        "description": "User has an account already and has succesfully joined the new business."
                    },
                    "303": {
                        "description": "User has not registered previously and must set a password first, this should redirect to reset password page."
                    },
                    "400": {
                        "description": "the token is invalid"
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "summary": "update user (Not password)",
                "description": "Updates basic user details",
                "tags": ["user"],
                "parameters": [
                    {
                        "name": "id",
                        "description": "The id of the current user.",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "first_name": {
                                        "description": "the new first name of the user",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "the new last name of the user",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "the new email of the user",
                                        "type": "string",
                                        "format": "email"
                                    },
                                    "phone": {
                                        "description": "the new phone number of the user",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User object succesfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": { "description": "Invalid request body property." },
                    "403": {
                        "description": "Id does not match logged in user."
                    },
                    "500": {
                        "$ref": "#/components/responses/DatabaseError"
                    }
                }
            }
        }
    }
}
